diff --git a/ccnl.h b/ccnl.h
index f4f5588..6295651 100644
--- a/ccnl.h
+++ b/ccnl.h
@@ -28,7 +28,7 @@
 #define CCNL_DEFAULT_UNIXSOCKNAME	"/tmp/.ccnl.sock"
 
 #define CCNL_MAX_INTERFACES		10
-#define CCNL_MAX_PACKET_SIZE		8096
+#define CCNL_MAX_PACKET_SIZE	16192
 
 #define CCNL_CONTENT_TIMEOUT		30 // sec
 #define CCNL_INTEREST_TIMEOUT		4  // sec
@@ -66,7 +66,7 @@
 #define CCNL_DTAG_INTERFACE     99202 // interface list
 #define CCNL_DTAG_NEXT          99203 // next pointer e.g. for faceinstance
 #define CCNL_DTAG_PREV          99204 // prev pointer e.g. for faceinstance
-#define CCNL_DTAG_IFNDX         99205 
+#define CCNL_DTAG_IFNDX         99205
 #define CCNL_DTAG_IP            99206
 #define CCNL_DTAG_ETH           99207
 #define CCNL_DTAG_UNIX          99208
diff --git a/nfn/ccnliteinterface/src/main/c/ccn-lite-bridge/libCCNLiteInterface.c b/nfn/ccnliteinterface/src/main/c/ccn-lite-bridge/libCCNLiteInterface.c
index 1a4cc86..4da65fc 100644
--- a/nfn/ccnliteinterface/src/main/c/ccn-lite-bridge/libCCNLiteInterface.c
+++ b/nfn/ccnliteinterface/src/main/c/ccn-lite-bridge/libCCNLiteInterface.c
@@ -9,14 +9,16 @@
 #include "open_memstream.h"
 // #endif
 
+#include "../../../../../../ccnl.h"
+
 JNIEXPORT jstring JNICALL
 Java_ccnliteinterface_CCNLiteInterface_ccnbToXml(JNIEnv *env, jobject obj, jbyteArray binaryInterest)
 {
     jbyte* jInterestData = (*env)->GetByteArrayElements(env, binaryInterest, NULL);
     jsize len = (*env)->GetArrayLength(env, binaryInterest);
 
-    unsigned char interestData[8*1024], *buf = interestData;
-    bzero(interestData, 8*1024);
+    unsigned char interestData[CCNL_MAX_PACKET_SIZE], *buf = interestData;
+    bzero(interestData, CCNL_MAX_PACKET_SIZE);
     memcpy(interestData, jInterestData, len);
 
 
@@ -87,7 +89,7 @@ Java_ccnliteinterface_CCNLiteInterface_mkBinaryContent(JNIEnv *env,
 
     char *components[CCNL_MAX_NAME_COMP], *component;
     int componentCount = 0;
-    unsigned char content_data[8*1024], *buf;
+    unsigned char content_data[CCNL_MAX_PACKET_SIZE], *buf;
 
     unsigned char out[65*1024];
     unsigned char *publisher = -1;
@@ -156,7 +158,7 @@ Java_ccnliteinterface_CCNLiteInterface_mkBinaryInterest(JNIEnv *env,
 
     char *components[CCNL_MAX_NAME_COMP], *component;
     int componentCount;
-    unsigned char out[8*1024], *buf = out;
+    unsigned char out[CCNL_MAX_PACKET_SIZE], *buf = out;
     char *minSuffix = 0, *maxSuffix = 0, *scope = 0;
     unsigned char *digest = 0, *publisher = 0;
     char *fname = 0;
@@ -210,8 +212,8 @@ Java_ccnliteinterface_CCNLiteInterface_mkAddToCacheInterest(JNIEnv *env,
                                            jobject obj,
                                            jstring ccnbContentFilename)
 {
-    unsigned char interestData[8*1024];
-    bzero(interestData, 8*1024);
+    unsigned char interestData[CCNL_MAX_PACKET_SIZE];
+    bzero(interestData, CCNL_MAX_PACKET_SIZE);
 
     char * file_uri;
     unsigned char *private_key_path;
diff --git a/nfn/ccnliteinterface/src/main/c/ccn-lite-bridge/libCCNLiteInterface.jnilib b/nfn/ccnliteinterface/src/main/c/ccn-lite-bridge/libCCNLiteInterface.jnilib
index 4051499..49fb282 100755
Binary files a/nfn/ccnliteinterface/src/main/c/ccn-lite-bridge/libCCNLiteInterface.jnilib and b/nfn/ccnliteinterface/src/main/c/ccn-lite-bridge/libCCNLiteInterface.jnilib differ
diff --git a/nfn/project/Build.scala b/nfn/project/Build.scala
index 0e6211b..675bb1e 100644
--- a/nfn/project/Build.scala
+++ b/nfn/project/Build.scala
@@ -40,8 +40,10 @@ object MainBuild extends Build {
         "ch.qos.logback" % "logback-classic" % "1.0.3",
         "com.typesafe" %% "scalalogging-slf4j" % "1.0.1",
         "org.slf4j" % "slf4j-api" % "1.7.5",
-        "net.liftweb" %% "lift-json" % "2.5.1"
-  )
+        "net.liftweb" %% "lift-json" % "2.5.1",
+        "org.apache.bcel" % "bcel" % "5.2"
+
+      )
     )
   ).dependsOn(lambdaMacros, ccnliteinterface, lambdaCalculus)
   //aggregate(nfn, lambdaCalculus, lambdaMacros , testservice, ccnliteinterface)
diff --git a/nfn/src/main/scala/bytecode/ByteLoaderTest.scala b/nfn/src/main/scala/bytecode/ByteLoaderTest.scala
index 41405ec..cdd7a6e 100644
--- a/nfn/src/main/scala/bytecode/ByteLoaderTest.scala
+++ b/nfn/src/main/scala/bytecode/ByteLoaderTest.scala
@@ -8,9 +8,12 @@ import scala.util.{Success, Failure, Try}
  */
 object ByteLoaderTest extends App {
 //  val testServiceJarfile = "./service-library/testservice_2.10-0.1-SNAPSHOT.jar"
-  val testServiceJarfile = "/Users/basil/Dropbox/uni/master_thesis/ccn-lite/nfn/testservice/target/scala-2.10/testservice_2.10-0.1-SNAPSHOT.jar"
+//  val testServiceJarfile = "/Users/basil/Dropbox/uni/master_thesis/ccn-lite/nfn/testservice/target/scala-2.10/testservice_2.10-0.1-SNAPSHOT.jar"
+  val testServiceJarfile = "/tmp/test.jar"
 
-  val tryServ: Try[NFNService] = BytecodeLoader.loadClass[NFNService](testServiceJarfile, "/testservice_ChfToDollar")
+  val servName = "/nfn_service_impl_Translate"
+
+  val tryServ: Try[NFNService] = BytecodeLoader.loadClass[NFNService](testServiceJarfile, servName)
 
   tryServ match {
     case Success(serv) => println(s"${serv.ccnName} returned success, throw argument exception"); throw serv.argumentException(Nil)
diff --git a/nfn/src/main/scala/bytecode/BytecodeLoader.scala b/nfn/src/main/scala/bytecode/BytecodeLoader.scala
index 0632038..d01f593 100644
--- a/nfn/src/main/scala/bytecode/BytecodeLoader.scala
+++ b/nfn/src/main/scala/bytecode/BytecodeLoader.scala
@@ -3,15 +3,85 @@ package bytecode
 import java.net.{URL, URLClassLoader}
 import scala.io.Source
 import scala.collection.convert.Wrappers.JEnumerationWrapper
-import java.io.File
+import java.io.{ByteArrayOutputStream, FileOutputStream, File}
 import java.nio.file.{Paths, Path, Files}
 import scala.util._
-import java.util.jar.{JarEntry, JarFile}
+import java.util.jar.{JarOutputStream, JarEntry, JarFile}
 import nfn.NFNServer
 import nfn.service.NFNService
+import org.apache.bcel.Repository
+import org.apache.bcel.classfile._
+import java.util.zip.ZipEntry
 
 object BytecodeLoader {
 
+  class DependencyEmitter(javaClass: JavaClass) extends EmptyVisitor {
+    override def visitConstantClass(obj: ConstantClass) {
+      val cp = javaClass.getConstantPool
+      val bytes = obj.getBytes(cp)
+      System.out.println(s"found: $bytes")
+    }
+  }
+
+  def byteCodeForClassAndDependencies(className: String) = {
+
+//    val filename = "/tmp/foo.jar"
+//    val file = new File(filename)
+//    if(file.exists()) {
+//      file.delete()
+//    }
+
+    val baOut = new ByteArrayOutputStream()
+    val jarOut = new JarOutputStream(baOut)
+
+    val startsWithFilters = List("scala", "java", "[Ljava")
+    val containFilters = List("impl")
+    var folders: Set[String] = Set()
+    try {
+      val javaClass = Repository.lookupClass(className)
+      val visitor = new EmptyVisitor() {
+        override def visitConstantClass(obj: ConstantClass) {
+          val cp = javaClass.getConstantPool
+          val dependentClassnameQualified = obj.getBytes(cp)
+
+
+
+          // dependantClassQualified does not start with any element of the filters
+          if(startsWithFilters.forall(!dependentClassnameQualified.startsWith(_)) &&
+             containFilters.forall(dependentClassnameQualified.contains)) {
+
+            val lastSlashIndex = dependentClassnameQualified.lastIndexOf("/") + 1 // "asdf/asdf/asdf" => ("asdf/asdf/", "asdf")
+            val (path, _) = dependentClassnameQualified.splitAt(lastSlashIndex)
+
+            if (!folders.contains(path)) {
+              println(s"adding folder: $path")
+              folders += path
+              println(s"folders: $folders")
+              jarOut.putNextEntry(new ZipEntry(path)); // Folders must end with "/".
+            }
+            println(s"adding: $dependentClassnameQualified.class")
+            jarOut.putNextEntry(new ZipEntry(dependentClassnameQualified + ".class"))
+            jarOut.write(javaClass.getBytes)
+            println(s"adding bytecode: ${new String(javaClass.getBytes).take(50)} ...")
+            jarOut.closeEntry()
+          } else {
+            println(s"skipping: $dependentClassnameQualified")
+          }
+        }
+      }
+      val classWalker = new DescendingVisitor(javaClass, visitor)
+      classWalker.visit()
+
+    } finally {
+      jarOut.close()
+    }
+
+    val fOut = new FileOutputStream(new File("/tmp/test.jar"))
+    fOut.write(baOut.toByteArray)
+    fOut.close()
+
+    baOut.toByteArray
+  }
 
   /**
    * Loads a class from either from:
@@ -69,10 +139,14 @@ object BytecodeLoader {
   }
 
   def fromClass(clazz: Any):Option[Array[Byte]] = {
-    classfileOfClass(clazz) map { classFile =>
-      val path = Paths.get(classFile.toURI)
-      Files.readAllBytes(path)
-    }
+////    findDependentClasses(clazz.getClass.getName)
+//    classfileOfClass(clazz) map { classFile =>
+//      val path = Paths.get(classFile.toURI)
+//      Files.readAllBytes(path)
+//    }
+    val byteCode = byteCodeForClassAndDependencies(clazz.getClass.getCanonicalName)
+    println(s"loaded bytecode (size: ${byteCode.size}")
+    Some(byteCode)
   }
 
   def toClass[T](classBytecode: Array[Byte], className: String) = {
diff --git a/nfn/src/main/scala/ccn/CCNLiteProcess.scala b/nfn/src/main/scala/ccn/CCNLiteProcess.scala
index c56a97a..e1e36b8 100644
--- a/nfn/src/main/scala/ccn/CCNLiteProcess.scala
+++ b/nfn/src/main/scala/ccn/CCNLiteProcess.scala
@@ -82,7 +82,7 @@ case class CCNLiteProcess(nodeConfig: NFNNodeConfig, withCompute: Boolean) exten
   val processName = if(withCompute) "CCNLiteNFNProcess" else "CCNLiteProcess"
 
   def start() = {
-//    if(port != 10010) {
+    if(port != 10010) {
 
     val ccnliteExecutable = if(withCompute) "../ccn-nfn-relay" else "../ccn-lite-relay"
     val cmd = s"$ccnliteExecutable -v 1 -u $port -x $sockName"
@@ -97,7 +97,7 @@ case class CCNLiteProcess(nodeConfig: NFNNodeConfig, withCompute: Boolean) exten
     val thread = new Thread(lsr, s"LogStreamReader-$prefix")
     thread.start()
 
-//    }
+    }
     globalFaceId = 2
 
 
diff --git a/nfn/src/main/scala/evaluation/PaperExperiment.scala b/nfn/src/main/scala/evaluation/PaperExperiment.scala
index 7d6b0de..6b1ed08 100644
--- a/nfn/src/main/scala/evaluation/PaperExperiment.scala
+++ b/nfn/src/main/scala/evaluation/PaperExperiment.scala
@@ -183,7 +183,8 @@ object PaperExperiment extends App {
   def doExp(exprToDo: Expr) = {
     import AkkaConfig.timeout
     var startTime = System.currentTimeMillis()
-    node1 ? exprToDo onComplete {
+    println(s"STARTING exp: '$expNum'")
+    node1 ? Interest(wc.tail) onComplete {
       case Success(content) => {
         val totalTime = System.currentTimeMillis - startTime
         println(s"RESULT($totalTime): $content")
diff --git a/nfn/src/main/scala/network/UDPConnection.scala b/nfn/src/main/scala/network/UDPConnection.scala
index b9d1c3a..fc9995f 100644
--- a/nfn/src/main/scala/network/UDPConnection.scala
+++ b/nfn/src/main/scala/network/UDPConnection.scala
@@ -17,6 +17,11 @@ object UDPConnection {
   case class Send(data: Array[Byte])
   case class Received(data: Array[Byte], sendingRemote: InetSocketAddress)
   case class Handler(worker: ActorRef)
+
+  val UdpSocketOptions = List(
+    Udp.SO.SendBufferSize(50000),
+    Udp.SO.ReceiveBufferSize(50000)
+  )
 }
 
 
@@ -47,7 +52,7 @@ class UDPConnection(local:InetSocketAddress, maybeTarget:Option[InetSocketAddres
   override def preStart() = {
     // IO is the manager of the akka IO layer, send it a request
     // to listen on a certain host on a port
-    IO(Udp) ! Udp.Bind(self, local)
+    IO(Udp) ! Udp.Bind(self, local, options = UdpSocketOptions)
   }
 
   def handleWorker(worker: ActorRef) = {
@@ -105,7 +110,7 @@ case class UDPSender(remote: InetSocketAddress) extends Actor {
   val logger = Logging(context.system, this)
 
   override def preStart() = {
-    IO(Udp) ! Udp.SimpleSender
+    IO(Udp) ! Udp.SimpleSender(UdpSocketOptions)
   }
 
 
diff --git a/nfn/src/main/scala/nfn/service/NFNService.scala b/nfn/src/main/scala/nfn/service/NFNService.scala
index fe31663..2f39b37 100644
--- a/nfn/src/main/scala/nfn/service/NFNService.scala
+++ b/nfn/src/main/scala/nfn/service/NFNService.scala
@@ -178,7 +178,7 @@ object NFNService extends Logging {
   }
 }
 
-trait NFNService extends Logging {
+trait NFNService {
 
   def executionTimeEstimate: Option[Int] = None
 
@@ -189,7 +189,7 @@ trait NFNService extends Logging {
   def argumentException(args: Seq[NFNValue]):NFNServiceArgumentException
 
   def instantiateCallable(name: CCNName, values: Seq[NFNValue], ccnServer: ActorRef, executionTimeEstimate: Option[Int]): Try[CallableNFNService] = {
-    logger.debug(s"NFNService: InstantiateCallable(name: $name, values: $values")
+    println(s"NFNService: InstantiateCallable(name: $name, values: $values")
     assert(name == ccnName, s"Service $ccnName is created with wrong name $name")
     verifyArgs(values)
     Try(CallableNFNService(name, values, ccnServer, function, executionTimeEstimate))
